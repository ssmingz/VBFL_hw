oritxt='/mnt/autoRun/bugs.txt'
newtxt='/mnt/autoRun/0113.log' # output generated by find_all_covered_tests.py

oritests = dict()
with open(oritxt, 'r') as f:
    for l in f:
        # 1,delete condition,sql/sql_table.cc,4167,SqlTableTest.*,SqlTableTest.PromoteFirstTimestampColumn2,merge_large_tests-t
        id = l.split(',')[0]
        testbin = l.split(',')[-1].strip()
        oritests[id] = dict()
        oritests[id][testbin] = l.split(',')[4]

newtests = dict()
with open(newtxt, 'r') as f:
    for l in f:
        if 'No test covered' in l:
            # bug 1 : No test covered
            id = l.split()[1]
            print(f'----------------- {id}: no test covered ')
        elif 'timeout ' in l:
            # bug 1 : timeout 20m /mnt/out_put/3_llvm/mysql-server-source/build/bin/merge_large_tests-t
            # --gtest_filter=OnoTesting/JsonGoodOnoTestP.GoodOno/1:OnoTesting/JsonGoodOnoTestP.GoodOno/2:OnoTesting/JsonGoodOnoTestP.GoodOno/0:ColumnStatisticsTest.StoreAndRestoreAttributesSingleton:ColumnStatisticsTest.StoreAndRestoreAttributesEquiHeight
            # | tee /mnt/values/3/values-large.txt
            id = l.split()[5].split('/')[3].split('_')[0]
            testbin = l.split()[5].split('/')[-1]
            tests = l.split()[6]
            tests = tests[tests.find('=')+1:]
            if id not in newtests.keys():
                newtests[id] = dict()
                #for k,v in oritests[id].items():
                #    newtests[id][k] = [v]
            if testbin not in newtests[id].keys():
                newtests[id][testbin] = tests.split(':')
            else:
                for t in tests.split(':'):
                    #suitename = t.split('.')[0]
                    #if not oritests[id][testbin].startswith(f'{suitename}.'):
                    #    newtests[id][testbin].append(t)
                    newtests[id][testbin].append(t)
ignore_bugid = []
for k,v in newtests.items():
    if len(v) == 0 or int(k) in ignore_bugid:
        continue
    for testbin,tests in v.items():
        teststr = ':'.join(tests)
        typestr = testbin.split('_')[1]
        testcmd = f'bug {k} : /mnt/out_put/{k}/mysql-server-source/build/bin/{testbin} --gtest_filter={teststr}'
        print(testcmd)

